#!/usr/bin/env ruby
#
#

require 'optparse'

root = "#{__dir__}/.."
require "#{root}/lib/mmarkdown"

options = {}

option_parser = OptionParser.new {|opts|
  Version = MMarkdown::VERSION

  opts.banner  = "Markdown with MathML\n"
  opts.banner += "  Usage: #{File.basename(__FILE__)} [option] <file.md>\n"
  opts.banner += "         #{File.basename(__FILE__)} [option] -i <markdown string>"

  opts.separator "Options:"

  opts.on("-oFILENAME", "--output FILENAME", String, "Output file name") {|f|
    options[:out_filename] = f
  }

  opts.on("-iSTRING", "--input STRING", String, "Markdown string") {|str|
    options[:input_string] = str
  }

  opts.on("--toc LEVEL", Integer, "List of table of contents as HTML",
         "(Header LEVEL)") {|level|
    options[:toc] = level
  }

  opts.on("--stdout", "Output to STDOUT") {
    options[:stdout] = true
  }

  opts.on("--style STYLE", String, "File name inserted as header") {|style|
    options[:style_file] = style
  }

  opts.on("--title TITLE", String, "Title of created html file") {|title|
    options[:title] = title
  }

  opts.on("--footer FOOTER", String, "File name for footer") {|footer|
    options[:footer] = footer
  }

  opts.on("-h", "--help", "Shows this message") {
    puts opts
    exit
  }
}
option_parser.parse!

Help_message = option_parser.to_s

def usage
  puts Help_message
end

if (ARGV.size != 1) && !options[:input_string]
  usage
  exit 0
else
  in_filename = ARGV[0]
end

if options[:input_string]
  md_string = options[:input_string]
else
  md_string = File.open(ARGV[0]).read
end

if options[:toc]
  html_string = MMarkdown.new(md_string).toc_html(options[:toc])
else
  html_string = MMarkdown.new(md_string, title: options[:title]).to_str
end

unless options[:stdout]
  if options[:out_filename]
    out_filename = options[:out_filename]
  else
    if in_filename =~ /\.md$/
      out_filename = in_filename.gsub(/\.md$/, ".html")
    elsif in_filename =~ /\.mmd$/
      out_filename = in_filename.gsub(/\.mmd$/, ".html")
    elsif in_filename =~ /\.markdown$/
      out_filename = in_filename.gsub(/\.markdown$/, ".html")
    elsif in_filename == ""
      out_filename = "mmarkdown.html"
    else
      out_filename = in_filename + ".html"
    end
  end

  File.open(out_filename, "w").write(html_string)
else
  puts html_string
end

